#!/bin/bash
#
#  nagios_hpilo_traps -- The script aims to collect the SNMP traps 
#			 received from HP ProLiant Server and to 
#			 update the corresponding status in real-time
#	        
#  (C) Copyright [2013] Hewlett-Packard Development Company, L.P.
#
#  This program is free software; you can redistribute it and/or modify 
#  it under the terms of version 2 of the GNU General Public License as 
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#
#  See the GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License 
#  along with this program; if not, write to:
#   Free Software Foundation, Inc.
#   51 Franklin Street, Fifth Floor
#   Boston, MA 02110-1301, USA.  
#
#   Written by Adrian Huang <adrian.huang@hp.com>.

prefix=@prefix@

NagiosLibexec="${prefix}/libexec"
NagiosHpiloEngine="nagios_hpilo_engine"

HpiloLogFile="/var/log/nagios_hpilo_traps.log"
HpiloSnmpComm="public" # hpilo ilo community string
HpiloServices=("System Status" "Fans" "Memory" "Network" "Power Supplies"\
		 "Processors" "Storage" "Temperatures")

SnmpTrapOid="iso.3.6.1.6.3.1.1.4.1.0"

HlthStatusChgTrap="HlthStuatsChangeTrap"

function get_hlth_service_type () {
	case $1 in
		603[5-9] | 6055 ) # Fan Group Trap
			echo "${HpiloServices[1]}"
			;;
		603[0-4] | 604[8-9] | 6050 |  605[4-5] ) # Power Supply Group Trap
			echo "${HpiloServices[4]}"
			;;
		604[0-2] ) # Temperature Group Trap
			echo "${HpiloServices[7]}"
			;;
		602[3-4] ) # Processors Group Trap
			echo "${HpiloServices[5]}"
			;;
		11020 ) # Health Status Array Change Trap
			echo "$HlthStatusChgTrap"
			;;
		*) 
			echo "None"
			;;
	esac
}

# argument 1 ($1): the iLO IP which generated the trap this time 
# argument 2 ($2): service type
# argument 3 ($3): service status (NAGIOS_OK or NAGIOS_WARNING or ...)
# argument 4 ($4): status information 
function nagios_passive_check () {

	
	write_log "PROCESS_SERVICE_CHECK_RESULT;$1;$2;$3;$4" 

	now=$((`date +%s`))
	printf "[%lu] PROCESS_SERVICE_CHECK_RESULT;$1;$2;$3;$4\n" $now > $NagiosCmdFile

}

# argument 1 ($1): The data to be logged
function write_log () {
	if [ "$VerboseMode" = "1" ]
	then
		echo -e "[`date "+%b %d %T"`] $1" >> $HpiloLogFile
	fi
}

function get_nagios_cfg_file() {
	local	nagios_cfg=


	# The format might be like: 
	#	1)  NagiosIloCfgFile=${prefix}/etc/nagios.cfg
	#	2)  NAGIOSCFG="/etc/nagios3/nagios.cfg"
        nagios_cfg=`grep -E "=.*etc.*nagios.cfg" /etc/init.d/nagios* | \
			cut -d '=' -f 2`

	# trim double quotes
	nagios_cfg=`echo $nagios_cfg | tr -d '"'`

	if [[ $nagios_cfg = *prefix* ]]; then
		# The /etc/init.d/nagios* has the fomrat like this:
		# 	NagiosIloCfgFile=${prefix}/etc/nagios.cfg
		# So, we need to replace ${prefix} with the actual value

		# Find the nagios prefix path
		local nagios_prefix=`grep -i "^prefix=" /etc/init.d/nagios* | \
				cut -d '=' -f 2`

		# ${prefix}/etc/nagios.cfg -> will be etc/nagios.cfg
		local nagios_suffix=`echo $nagios_cfg | cut -d '/' -f 2-`

		nagios_cfg="${nagios_prefix}/$nagios_suffix"
	fi

	echo "$nagios_cfg"

}

# argument 1 ($1): the iLO IP which generated the trap this time 
# argument 2 ($2): the iLO IP trap number 
# argument 3 ($3): service type
function update_hlth_status () {
	local nagios_cfg_file=$(get_nagios_cfg_file)
	local oid_idx=
	local nagios_service_status=

	write_log "$nagios_cfg_file"

	NagiosCmdFile=`grep -r command_file $nagios_cfg_file | \
		awk -F = '{print $2}'`


	for((idx=0;idx<${#HpiloServices[@]};idx++)) 
	do
		if [ "$3" = "${HpiloServices[$idx]}" ]; then
			oid_idx=$idx
			break
		fi
	done
		
	# The oid_idx must be increased by 1 since the oid index of the 
	# NagiosHpiloEngine is started from 1 rather than 0. 
	write_log "$NagiosLibexec/$NagiosHpiloEngine -H $IloIP -C $HpiloSnmpComm -o $((oid_idx+1))" 
	output=`$NagiosLibexec/$NagiosHpiloEngine -H $IloIP -C $HpiloSnmpComm -o $((oid_idx+1))`

	nagios_service_status=$?

	nagios_passive_check "$1" "$3" "$nagios_service_status" "$output"
		

}

read IloIP 
read protocol

# Get the iLO trap ID 
while read oid val
do
	if [ "$oid" = "$SnmpTrapOid" ]; then
		t
		# get the iLO trap ID
		IloTrapNumber=`echo $val | awk -F . '{print $NF}'`
		break;
	fi
done

VerboseMode=0
# verbose mode: write the log to the variable HpiloLogFile 
if [ "$1" = "-v" ]
then
	VerboseMode=1
fi

ServiceType=$(get_hlth_service_type $IloTrapNumber)

write_log "ilo_ip: $IloIP trap_number: $IloTrapNumber, type: $ServiceType"

if [ "$ServiceType" != "None" ]
then

	if [ "$ServiceType" != "$HlthStatusChgTrap" ]
	then
		update_hlth_status $IloIP $IloTrapNumber "$ServiceType" 
	fi

	# update system health status
	update_hlth_status $IloIP $IloTrapNumber "${HpiloServices[0]}"
fi

